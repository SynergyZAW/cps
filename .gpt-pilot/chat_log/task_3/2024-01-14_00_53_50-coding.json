{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "simulation_state.py",
          "path": "/simulation/simulation_state.py",
          "content": "class SimulationState:\n    def __init__(self):\n        self.active = False  # Indicates if the simulation is active\n\n    def start(self):\n        self.active = True\n\n    def stop(self):\n        self.active = False\n\n    def reset(self):\n        self.active = False\n        # [OLD CODE] Add logic here to reset the simulation's internal state if needed.\n\n# We instantiate a global state object to be shared across modules\nsimulation_state = SimulationState()\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "control_buttons.py",
          "path": "/interface/control_buttons.py",
          "content": "from simulation.simulation_state import simulation_state\nimport streamlit as st\n\n# We'll import the simulation engine so we can start and reset the simulation appropriately\nfrom simulation.simulation_engine import SimulationEngine\n\n\ndef show():\n    st.header(\"Simulation Control\")\n    if st.button('Start'):\n        # Update the simulation state to reflect that the simulation should be running\n        simulation_state.start()\n        # Start the simulation\n        sim_engine = SimulationEngine()\n        sim_engine.run()\n\n    if st.button('Stop'):\n        # Update the simulation state to reflect that the simulation should be stopped\n        simulation_state.stop()\n\n    if st.button('Reset'):\n        # Reset the simulation to initial conditions\n        simulation_state.reset()\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "user_input.py",
          "path": "/interface/user_input.py",
          "content": "import streamlit as st\n\n# This is a global dictionary to hold user input values\nuser_inputs = {}\n\n\ndef show():\n    st.sidebar.header(\"User Inputs\")\n\n    # Use global dictionary to store the input values\n    user_inputs['market_demand'] = st.sidebar.slider('Market Demand', min_value=0, max_value=100, value=50)\n    user_inputs['regulatory_conditions'] = st.sidebar.text_input('Regulatory Conditions', \"\")\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "simulation_engine.py",
          "path": "/simulation/simulation_engine.py",
          "content": "from .farmer import Farmer\nfrom .regulator import Regulator\nfrom .simulation_state import simulation_state  # Import the simulation state\nfrom interface.user_input import user_inputs    # Import the user inputs\n\nclass SimulationEngine:\n    def __init__(self):\n        self.farmers = []\n        self.regulators = []\n        self.market_conditions = None\n    \n    def add_farmer(self, name, production_capacity, compliance):\n        farmer = Farmer(name, production_capacity, compliance)\n        self.farmers.append(farmer)\n\n    def add_regulator(self, name, policy_influence):\n        regulator = Regulator(name, policy_influence)\n        self.regulators.append(regulator)\n\n    def set_market_conditions(self):\n        # Retrieve market conditions from user inputs\n        self.market_conditions = user_inputs.get('market_demand')\n\n    def step(self):\n        if not simulation_state.active:\n            return  # Do nothing if simulation is stopped\n        # [OLD CODE] Implement the logic to update farmers and regulators based on current conditions\n        for farmer in self.farmers:\n            farmer.step()\n        for regulator in self.regulators:\n            regulator.step()\n\n    def run(self, steps=24):\n        for _ in range(steps):\n            self.set_market_conditions()  # Update market conditions based on user input\n            self.step()\n"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "streamlit run streamlit_app.py",
          "timeout": 10000,
          "command_id": "streamlit_run_abm_app"
        }
      }
    ]
  }
}