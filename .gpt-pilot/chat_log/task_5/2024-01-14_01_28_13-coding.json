{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "save_files",
      "description": "Iterates over the files passed to this function and saves them on the disk.",
      "parameters": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "description": "List of files that need to be saved.",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the file that needs to be saved on the disk."
                },
                "path": {
                  "type": "string",
                  "description": "Full path of the file with the file name that needs to be saved."
                },
                "content": {
                  "type": "string",
                  "description": "Full content of the file that needs to be saved on the disk. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the file that needs to be saved on the disk. This description doesn't need to explain what is being done currently in this task but rather what is the idea behind this file - what do we want to put in this file in the future. Write the description ONLY if this is the first time this file is being saved. If this file already exists on the disk, leave this field empty."
                }
              },
              "required": [
                "name",
                "path",
                "content"
              ]
            }
          }
        },
        "required": [
          "files"
        ]
      }
    }
  ],
  "response": {
    "files": [
      {
        "name": "visualization_debug_helper.py",
        "path": "/visualization/visualization_debug_helper.py",
        "content": "import streamlit as st\n\n\ndef visualize_data_debug(data):\n    try:\n        st.write(data)\n    except Exception as e:\n        st.error('An error occurred in visualization: {}'.format(e))\n        # INPUT_REQUIRED {Include instructions to report this error or a way to handle it}\n",
        "description": "This new helper file contains a function used for debugging purposes. It will visualize the data and catch any errors in the visualization process, enabling us to identify and fix issues in the rendering of visualizations."
      },
      {
        "name": "ui_debug_helper.py",
        "path": "/interface/ui_debug_helper.py",
        "content": "import streamlit as st\n\n\ndef check_ui_responsiveness():\n    try:\n        # [OLD CODE] Place the logic that checks UI responsiveness here\n    except Exception as e:\n        st.error('UI Responsiveness check failed: {}'.format(e))\n        # INPUT_REQUIRED {Include instructions to report this error or a way to handle it}\n",
        "description": "A helper file to include functions that check the UI responsiveness. This script can contain methods to verify responsiveness and to log errors related to user interface performance."
      },
      {
        "name": "session_state_debugger.py",
        "path": "/simulation/session_state_debugger.py",
        "content": "from simulation_state import simulation_state\nimport streamlit as st\n\n\ndef debug_session_state():\n    try:\n        # [OLD CODE] Check and validate simulation state maintenance across reruns\n    except Exception as e:\n        st.error('Session state debugging failed: {}'.format(e))\n        # INPUT_REQUIRED {Specify a recovery or reporting mechanism for session state errors}\n",
        "description": "This new file is meant to centralize debugging functions specific to the session state management of the simulation. It will include tests and validations to ensure that the session state is consistent across reruns."
      }
    ]
  }
}