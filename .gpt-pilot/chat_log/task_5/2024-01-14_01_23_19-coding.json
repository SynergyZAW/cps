{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "command": "streamlit run streamlit_app.py",
          "timeout": 30000,
          "command_id": "run_streamlit_app",
          "success_message": "You can now view your Streamlit app in your browser"
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "Manually interact with the Streamlit application to test inputs, outputs, and responsiveness. Record any issues or bugs encountered."
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "issues_report.md",
          "path": "/issues_report.md",
          "content": "# ABM Beta Testing Issues Report\n\n## Issues Summary\n\n- [ ] Issue 1: Description and reproduction steps\n- [ ] Issue 2: Description and reproduction steps\n...\n\n## Detailed Issues Descriptions\n\n### Issue 1\n**Description:**\n{detailed description}\n\n**Reproduction Steps:**\n1. {step 1}\n2. {step 2}\n...\n\n**Expected Result:**\n{what the expected result should be}\n\n**Actual Result:**\n{what the actual result was}\n\n**Screenshots:**\n{links or paths to screenshots}\n\n### Issue 2\n...\n"
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "Review the issues_record.md file and fix the issues reported in the existing application code. After fixing each issue, run the Streamlit application again to confirm the fix."
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "feedback.md",
          "path": "/feedback.md",
          "content": "# ABM Beta Testing Feedback\n\n## Feedback Summary\n\n- Feedback 1: Description and user suggestion\n- Feedback 2: Description and user suggestion\n...\n\n## Detailed Feedback Descriptions\n\n### Feedback 1\n**Description:**\n{user's feedback}\n\n**Suggestion:**\n{user's suggestion for improvement}\n\n### Feedback 2\n...\n"
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "Collect feedback from beta testers, fill in feedback.md with the information, and address the feedback by implementing enhancements or refinements in the UI or code logic."
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "CHANGELOG.md",
          "path": "/CHANGELOG.md",
          "content": "# Changelog\n\n## [Unreleased]\n\n### Added\n- New feature details\n\n### Changed\n- List of changes to existing functionality\n\n### Fixed\n- List of bug fixes\n- Issue 1: brief description of the fix\n- Issue 2: brief description of the fix\n...\n\n## [0.x.x] - YYYY-MM-DD\n..."
        }
      },
      {
        "type": "command",
        "command": {
          "command": "git add .",
          "timeout": 3000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "git commit -m \"Addressed beta testing issues and feedback\"",
          "timeout": 3000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "git push",
          "timeout": 5000
        }
      },
      {
        "type": "human_intervention",
        "human_intervention_description": "After committing the changes to Git, perform additional testing to ensure that all previous issues have been successfully resolved."
      },
      {
        "type": "command",
        "command": {
          "command": "taskkill /F /IM streamlit.exe /T",
          "timeout": 5000
        }
      }
    ]
  }
}