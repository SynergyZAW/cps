{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "simulation_engine.py",
          "path": "/simulation/simulation_engine.py",
          "content": "from .farmer import Farmer\nfrom .regulator import Regulator\nfrom .simulation_state import simulation_state\nfrom interface.user_input import user_inputs\nfrom .data_collector import DataCollector\n\nclass SimulationEngine:\n    def __init__(self):\n        self.farmers = [Farmer('Farmer1', 100, True)]\n        self.regulators = [Regulator('Regulator1', 0.1)]\n        self.market_conditions = {'demand': 0, 'price': 0}\n        self.data_collector = DataCollector()\n\n    def set_market_conditions(self):\n        self.market_conditions = {\n            'demand': user_inputs.get('market_demand', 0),\n            'price': 10  // INPUT_REQUIRED {Adjust price based on simulation needs}\n        }\n\n    def step(self):\n        if not simulation_state.active:\n            return\n        regulatory_conditions = self.get_regulatory_conditions()\n        for farmer in self.farmers:\n            farmer.step(self.market_conditions, regulatory_conditions)\n        for regulator in self.regulators:\n            regulator.step(self.market_conditions)\n        self.data_collector.collect(self.farmers)\n\n    def get_regulatory_conditions(self):\n        \"\"\"\n        Aggregates all the policy influences from the regulators into a single set of regulatory conditions\n        \"\"\"\n        regulatory_conditions = {\n            'compliance_factor': 1,  \n            'other_factors': {}     \n        }\n        for reg in self.regulators:\n            effect = reg.policy_influence_effect()\n            regulatory_conditions['compliance_factor'] *= effect.get('compliance_factor', 1)\n            for k, v in effect.get('other_factors', {}).items():\n                regulatory_conditions['other_factors'][k] = v\n        return regulatory_conditions\n\n    def run(self, steps=24):\n        self.reset()\n        simulation_state.start()\n        for _ in range(steps):\n            self.set_market_conditions()\n            self.step()\n        simulation_state.stop()\n        \n    def reset(self):\n        self.farmers = [Farmer('Farmer1', 100, True)] // INPUT_REQUIRED {Reset or create farmers with initial parameters}\n        self.regulators = [Regulator('Regulator1', 0.1)] // INPUT_REQUIRED {Reset or create regulators with initial parameters}\n        self.market_conditions = {'demand': 0, 'price': 0}\n        self.data_collector.reset()\n    \n    def get_simulation_data(self):\n        return self.data_collector.to_dataframe()\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "regulator.py",
          "path": "/simulation/regulator.py",
          "content": "from .agent import Agent\n\nclass Regulator(Agent):\n    def __init__(self, name, policy_influence):\n        super().__init__(name)\n        self.policy_influence = policy_influence\n\n    def step(self, market_conditions):\n        policy_effect = self.policy_influence_effect()\n        market_conditions.update(policy_effect)\n\n    def policy_influence_effect(self):\n        adjusted_demand = 10  // INPUT_REQUIRED {Implement the logic for adjusted demand}\n        compliance_factor = 1.2  // INPUT_REQUIRED {Implement the logic for compliance factor}\n        other_factors = {}  // INPUT_REQUIRED {Define any other regulatory effects here}\n        return {\n            'demand': adjusted_demand,\n            'compliance_factor': compliance_factor,\n            'other_factors': other_factors\n        }\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "output_visualization.py",
          "path": "/interface/output_visualization.py",
          "content": "import streamlit as st\nimport matplotlib\nmatplotlib.use('Agg')\nfrom visualization.production_output import show_total_production\nfrom visualization.compliance_levels import show_compliance_levels\n\ndef display_visualizations(simulation_data):\n    st.subheader(\"Total Production Output\")\n    total_production_chart = show_total_production(simulation_data)\n    st.pyplot(total_production_chart)\n\n    st.subheader(\"Compliance Levels\")\n    compliance_levels_chart = show_compliance_levels(simulation_data)\n    st.altair_chart(compliance_levels_chart, use_container_width=True)\n\n[OLD CODE] Make sure all other previously implemented functionalities remain intact.\n"
        }
      }
    ]
  }
}