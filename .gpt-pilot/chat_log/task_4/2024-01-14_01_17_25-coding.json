{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "control_buttons.py",
          "path": "/interface/control_buttons.py",
          "content": "from simulation.simulation_state import simulation_state\nimport streamlit as st\n\nfrom simulation.simulation_engine import SimulationEngine\n\n\ndef show():\n    st.header(\"Simulation Control\")\n    \n    if 'sim_engine' not in st.session_state:\n        st.session_state.sim_engine = SimulationEngine()\n\n    sim_engine = st.session_state.sim_engine\n\n    if st.button('Start'):\n        simulation_state.start()\n        st.session_state.sim_engine = sim_engine\n        st.experimental_rerun()\n\n    if st.button('Stop'):\n        simulation_state.stop()\n\n    if st.button('Reset'):\n        simulation_state.reset()\n        sim_engine.reset()\n        del st.session_state.sim_engine\n        st.experimental_rerun()\n"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "streamlit_app.py",
          "path": "/streamlit_app.py",
          "content": "import streamlit as st\nfrom interface import user_input, control_buttons, output_placeholders\nfrom simulation.simulation_engine import SimulationEngine\nfrom simulation.simulation_state import simulation_state\nfrom interface.output_visualization import display_visualizations\n\ndef main():\n    user_input.show()\n    control_buttons.show()\n    output_placeholders.show()\n\n    if 'sim_engine' in st.session_state:\n        sim_engine = st.session_state.sim_engine\n    \n        if simulation_state.active:\n            sim_engine.run()\n            simulation_data = sim_engine.get_simulation_data()\n            display_visualizations(simulation_data)\n\nif __name__ == \"__main__\":\n    main()\n"
        }
      }
    ]
  }
}