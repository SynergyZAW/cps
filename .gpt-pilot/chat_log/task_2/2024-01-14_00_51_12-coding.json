{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "code_change",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "code_change": {
                  "type": "object",
                  "description": "A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be implemented."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be implemented."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "code_change",
        "code_change": {
          "name": "agent.py",
          "path": "simulation/agent.py",
          "content": "class Agent:\n    def __init__(self, name):\n        self.name = name\n\n    def step(self):\n        pass  # INPUT_REQUIRED {Override this in subclasses with specific behavior}"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "farmer.py",
          "path": "simulation/farmer.py",
          "content": "from .agent import Agent\n\nclass Farmer(Agent):\n    def __init__(self, name, production_capacity, compliance):\n        super().__init__(name)\n        self.production_capacity = production_capacity\n        self.compliance = compliance\n\n    def step(self):\n        pass  # INPUT_REQUIRED {Define farmer behavior per simulation step}"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "regulator.py",
          "path": "simulation/regulator.py",
          "content": "from .agent import Agent\n\nclass Regulator(Agent):\n    def __init__(self, name, policy_influence):\n        super().__init__(name)\n        self.policy_influence = policy_influence\n\n    def step(self):\n        pass  # INPUT_REQUIRED {Define regulator's policy influence per simulation step}"
        }
      },
      {
        "type": "code_change",
        "code_change": {
          "name": "simulation_engine.py",
          "path": "simulation/simulation_engine.py",
          "content": "from .farmer import Farmer\nfrom .regulator import Regulator\n\nclass SimulationEngine:\n    def __init__(self):\n        self.farmers = []\n        self.regulators = []\n        self.market_conditions = None\n    \n    def add_farmer(self, name, production_capacity, compliance):\n        farmer = Farmer(name, production_capacity, compliance)\n        self.farmers.append(farmer)\n\n    def add_regulator(self, name, policy_influence):\n        regulator = Regulator(name, policy_influence)\n        self.regulators.append(regulator)\n\n    def set_market_conditions(self, market_conditions):\n        self.market_conditions = market_conditions  # INPUT_REQUIRED {Define market conditions}\n\n    def step(self):\n        for farmer in self.farmers:\n            farmer.step()\n        for regulator in self.regulators:\n            regulator.step()\n\n    def run(self, steps=24):\n        for _ in range(steps):\n            self.step()  # INPUT_REQUIRED {Implement simulation steps}"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "python -m pip install streamlit pandas numpy matplotlib altair",
          "timeout": 600000
        }
      }
    ]
  }
}