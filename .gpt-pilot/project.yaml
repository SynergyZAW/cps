name: ABM
description: 'Development of a Basic Agent-Based Model (ABM) named "ABM" will be undertaken to simulate the South African
  cannabis and hemp industry using Streamlit. This basic version will feature two types of agents: Farmers (formal and informal)
  with attributes like production capacity and compliance status, and Regulators who affect market conditions and policies.
  The interactions will allow Farmers to respond to market conditions and Regulators to implement policies.


  The simulation will run over a timeframe of two years per execution and is designed for a single user without support for
  multiple simultaneous users. The Streamlit interface will enable user input for parameters such as market demand and regulatory
  conditions through sliders or input fields. Users can control the simulation with start, stop, and reset buttons.


  Data visualization will present results through graphs or tables, showcasing key outputs like total production and compliance
  levels. However, no feedback mechanism for user input is required for this application.


  Development guidelines include maintaining a clean, well-documented codebase, ensuring user-friendliness, and prioritizing
  quick loading and smooth interaction. Codebase documentation will consist of an overview, in-code comments, descriptive
  docstrings, a comprehensive README file, API documentation (if applicable), a change log or version control messages, testing
  documentation, deployment instructions, coding standards, and future development notes.


  The implementation does not require the collection of historical data input from users since default values for the simulation
  parameters will be provided, which users can adjust. Design should account for scalability for eventual enhancement with
  more complex features.'
user_stories:
- User will input parameters for market demand and regulatory conditions using sliders or input fields in the Streamlit interface.
- User will start the simulation by clicking the 'start' button in the Streamlit interface.
- User will stop the ongoing simulation by clicking the 'stop' button in the Streamlit interface.
- User will reset the simulation to initial conditions by clicking the 'reset' button in the Streamlit interface.
- User will observe the total production output through graphs or tables within the Streamlit interface.
- User will assess compliance levels of the Farmers through visualizations in the Streamlit interface.
architecture:
- Streamlit
- Python
- Pandas
- numpy
- matplotlib
- altair
- Git
development_plan:
- description: Set up a basic Streamlit app with a simple interface that has placeholder elements for user inputs (sliders
    and input fields), control buttons (start, stop, reset), and placeholders for visualizing outputs (graphs and tables).
  programmatic_goal: Create a Streamlit interface with mock sliders, input fields, buttons, and placeholders for visualizations.
    Commit codebase to Git repository.
  user_review_goal: Ensure the Streamlit app launches with the defined elements visible and accessible, even if they are non-functional.
- description: Develop the ABM simulation engine in Python using classes to define Farmers and Regulators with their attributes
    and methods for their behaviors and interactions.
  programmatic_goal: Implement classes with attributes and methods, and test interactions between Farmers and Regulators without
    UI integration.
  user_review_goal: Verify the logic and interactions of Farmers and Regulators through unit tests.
- description: Integrate the ABM simulation engine with the Streamlit app, connecting user inputs to the simulation parameters
    and enabling the control buttons to start, stop, and reset the simulation.
  programmatic_goal: Complete Streamlit integration to perform simulations and respond to start, stop, and reset button actions.
    Commit updated code to Git.
  user_review_goal: User can start, stop, and reset simulations using the buttons, and the simulation respects the inputs
    from the user.
- description: Implement data visualization for total production output and compliance levels using matplotlib and altair
    for graphs, and pandas for data manipulation.
  programmatic_goal: Produce dynamic graphs and tables which update according to the simulation's progress. Ensure visualizations
    are committed to Git repository.
  user_review_goal: User views accurate and responsive graphs and tables reflecting total production and compliance levels
    corresponding to the simulation's outputs.
- description: Conduct a stream of beta tests of the entire Streamlit app through iterative development cycles to ensure all
    parts work together smoothly, iron out any bugs and enhance the user interface based on feedback.
  programmatic_goal: Iteratively refine code and user interface based on beta test results, with all changes committed to
    Git.
  user_review_goal: The app functions without bugs, responds swiftly to user inputs, and provides a user-friendly experience
    with clear, comprehensible visualizations.
